package no.ntnu.idatx2003.exam2025.boardgames.dao.player;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import no.ntnu.idatx2003.exam2025.boardgames.model.Player;

/**
 * Implementation of the PlayerDao interface for managing Player entities in the
 * database.
 * Provides methods to create, find, and delete players.
 * Parts of this code has BEEN GENERATED BY COPILOT USING CHATGPT 4.0!
 */
public class PlayerDaoImpl implements PlayerDao {
  private final Connection connection;

  public PlayerDaoImpl(Connection connection) {
    this.connection = connection;
  }

  @Override
  public int create(Player player) throws SQLException {
    String sql = """
            INSERT INTO players (player_name, player_age)
            VALUES (?, ?);
        """;
    try (PreparedStatement stmt = connection.prepareStatement(sql,
        PreparedStatement.RETURN_GENERATED_KEYS)) {
      stmt.setString(1, player.getPlayerName());
      stmt.setInt(2, player.getPlayerAge());
      stmt.executeUpdate();

      // Retrieve the generated player_id
      try (ResultSet rs = stmt.getGeneratedKeys()) {
        if (rs.next()) {
          return rs.getInt(1); // Return the generated player_id
        }
      }
    }
    throw new SQLException("Failed to create player, no ID obtained.");
  }

  @Override
  public Player findById(int playerId) throws SQLException {
    String sql = "SELECT * FROM players WHERE player_id = ?";
    try (PreparedStatement stmt = connection.prepareStatement(sql)) {
      stmt.setInt(1, playerId);
      try (ResultSet rs = stmt.executeQuery()) {
        if (rs.next()) {
          return new Player(
              rs.getInt("player_id"),
              null, // PlayerStats can be set later
              rs.getString("player_name"),
              rs.getInt("player_age"));
        }
      }
    }
    return null;
  }

  @Override
  public void delete(int playerId) throws SQLException {
    String sql = "DELETE FROM players WHERE player_id = ?";
    try (PreparedStatement stmt = connection.prepareStatement(sql)) {
      stmt.setInt(1, playerId);
      stmt.executeUpdate();
    }
  }

  @Override
  public List<String> getAllPlayerNames() throws SQLException {
    List<String> names = new ArrayList<>();
    String sql = "SELECT player_name FROM players";
    try (PreparedStatement stmt = connection.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery()) {
      while (rs.next()) {
        names.add(rs.getString("player_name"));
      }
    }
    return names;
  }

  @Override
  public List<Integer> getAllPlayerIds() throws SQLException {
    List<Integer> ids = new ArrayList<>();
    String sql = "SELECT player_id FROM players";
    try (PreparedStatement stmt = connection.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery()) {
      while (rs.next()) {
        ids.add(rs.getInt("player_id"));
      }
    }
    return ids;
  }
}
